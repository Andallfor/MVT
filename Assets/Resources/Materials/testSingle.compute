// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

uint2 meshCount, pointCount;

RWStructuredBuffer<float3> vectors;

[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    uint threadGroup = id.x / 128;
    uint meshIndex = threadGroup / 2;
    uint meshX = meshIndex % meshCount.x;
    uint meshY = (meshIndex - meshX) / meshCount.x;

    uint sx = meshX * 256;
    uint sy = meshY * 256;

    uint y = id.x % 256;
    uint fy = y + sy;

    if (fy >= pointCount.y) return;

    uint lx = min(pointCount.x - sx, 256);
    uint ly = min(pointCount.y - sy, 256);
    uint offset = sy * pointCount.x + sx * ly;

    for (uint x = 0; x < lx; x++) {
        float tx = sx + x - meshX;
        float ty = sy + y - meshY;
        vectors[offset + y * lx + x] = float3(tx, 0, ty);
    }
}
